import * as TaskManager from 'expo-task-manager';
import * as BackgroundFetch from 'expo-background-fetch';
import * as Notifications from 'expo-notifications';
import AsyncStorage from '@react-native-async-storage/async-storage';
// Định nghĩa tên cho background task
const BOOKING_TIMER_TASK = 'booking-timer-task';

// Cấu hình notifications
Notifications.setNotificationHandler({
    handleNotification: async () => ({
        shouldShowAlert: true,
        shouldPlaySound: true,
        shouldSetBadge: false,
    }),
});

// Định nghĩa tác vụ nền cho bộ đếm thời gian
TaskManager.defineTask(BOOKING_TIMER_TASK, async ({ data, error }) => {
    if (error) {
        console.error("Lỗi khi xử lý tác vụ nền:", error);
        return BackgroundFetch.BackgroundFetchResult.Failed;
    }

    try {
        // Lấy thời gian kết thúc từ AsyncStorage
        const endTimeStr = await AsyncStorage.getItem('bookingEndTime');
        const bookingId = await AsyncStorage.getItem('currentBookingId');

        if (!endTimeStr || !bookingId) {
            console.log("Không tìm thấy thông tin đặt vé.");
            return BackgroundFetch.BackgroundFetchResult.NoData;
        }

        const endTime = parseInt(endTimeStr);
        const currentTime = new Date().getTime();
        const timeRemaining = Math.floor((endTime - currentTime) / 1000);

        console.log(`Thời gian còn lại: ${timeRemaining} giây cho đặt vé ${bookingId}`);

        // Nếu thời gian đã hết
        if (timeRemaining <= 0) {
            // Thông báo cho người dùng
            await Notifications.scheduleNotificationAsync({
                content: {
                    title: "Hết thời gian đặt vé",
                    body: "Thời gian giữ ghế của bạn đã hết.",
                    data: { bookingId },
                },
                trigger: null, // Gửi ngay lập tức
            });

            // Xóa dữ liệu đặt vé
            await AsyncStorage.removeItem('bookingEndTime');
            await AsyncStorage.removeItem('currentBookingId');
            await AsyncStorage.removeItem('selectedChairs');

            return BackgroundFetch.BackgroundFetchResult.NewData;
        }

        // Nếu sắp hết thời gian (ví dụ: còn 1 phút)
        if (timeRemaining <= 60) {
            await Notifications.scheduleNotificationAsync({
                content: {
                    title: "Sắp hết thời gian đặt vé",
                    body: "Bạn còn 1 phút để hoàn tất việc đặt vé.",
                    data: { bookingId },
                },
                trigger: null,
            });
        }

        return BackgroundFetch.BackgroundFetchResult.NewData;
    } catch (err) {
        console.error("Lỗi trong task chạy ngầm:", err);
        return BackgroundFetch.BackgroundFetchResult.Failed;
    }
});

// Đăng ký task nền
async function registerBackgroundFetchAsync() {
    try {
        const isRegistered = await AsyncStorage.getItem('isTaskRegistered');
        if (isRegistered === 'true') {
            console.log("⚠️ Task đã được đăng ký rồi.");
            return;
        }

        await BackgroundFetch.registerTaskAsync(BOOKING_TIMER_TASK, {
            minimumInterval: 30,
            stopOnTerminate: false,
            startOnBoot: true,
        });

        await AsyncStorage.setItem('isTaskRegistered', 'true');
        console.log("✅ Đã đăng ký tác vụ nền thành công");
    } catch (err) {
        console.error("❌ Lỗi khi đăng ký tác vụ nền:", err);
    }
}


// Hủy đăng ký task nền
async function unregisterBackgroundFetchAsync() {
    try {
        await BackgroundFetch.unregisterTaskAsync(BOOKING_TIMER_TASK);
        await AsyncStorage.setItem('isTaskRegistered', 'false');
        console.log("✅ Đã hủy tác vụ nền");
    } catch (err) {
        console.error("❌ Lỗi khi hủy tác vụ nền:", err);
    }
}

// Khởi tạo bộ đếm thời gian và lưu thời gian kết thúc
useEffect(() => {
    const setupBookingTimer = async () => {
        try {
            // Kiểm tra xem có đang có phiên đặt vé nào không
            const existingEndTimeStr = await AsyncStorage.getItem('bookingEndTime');
            const existingBookingId = await AsyncStorage.getItem('currentBookingId');

            // Nếu đã có phiên đặt vé và đang đặt vé cho phim khác thì hủy phiên cũ
            if (existingEndTimeStr && existingBookingId && existingBookingId !== id) {
                await AsyncStorage.removeItem('bookingEndTime');
                await AsyncStorage.removeItem('currentBookingId');
                await AsyncStorage.removeItem('selectedChairs');
            }

            let endTime: number;

            // Nếu có phiên đặt vé cũ và đúng phim hiện tại thì tiếp tục
            if (existingEndTimeStr && existingBookingId === id) {
                endTime = parseInt(existingEndTimeStr);
                const now = new Date().getTime();
                const remaining = Math.floor((endTime - now) / 1000);

                // Nếu thời gian còn lại hợp lệ
                if (remaining > 0) {
                    setTimeRemaining(remaining);

                    // Khôi phục ghế đã chọn
                    const savedChairsStr = await AsyncStorage.getItem('selectedChairs');
                    if (savedChairsStr) {
                        const savedChairs = JSON.parse(savedChairsStr);
                        setSelectedChairs(savedChairs);
                        // Tính tổng tiền
                        const total = savedChairs.reduce((sum: number, chair: seatType) => sum + chair.price, 0);
                        setTotalPrice(total);
                    }
                } else {
                    // Thời gian đã hết, tạo mới
                    endTime = new Date().getTime() + 600 * 1000; // Thêm 10 phút
                    await AsyncStorage.setItem('bookingEndTime', endTime.toString());
                    await AsyncStorage.setItem('currentBookingId', id);
                }
            } else {
                // Tạo mới phiên đặt vé
                endTime = new Date().getTime() + 600 * 1000; // Thêm 10 phút
                await AsyncStorage.setItem('bookingEndTime', endTime.toString());
                await AsyncStorage.setItem('currentBookingId', id);
            }

            // Đăng ký task nền
            await registerBackgroundFetchAsync();

            // Khởi tạo interval trong foreground
            timerRef.current = setInterval(() => {
                const now = new Date().getTime();
                const remaining = Math.floor((endTime - now) / 1000);

                setTimeRemaining(prevTime => {
                    if (remaining <= 0) {
                        if (timerRef.current !== null) {
                            clearInterval(timerRef.current);
                        }
                        Alert.alert("Hết thời gian", "Thời gian chọn ghế đã hết!", [
                            { text: "OK", onPress: () => navigation.goBack() }
                        ]);
                        return 0;
                    }
                    return remaining;
                });
            }, 1000);

        } catch (error) {
            console.error("Lỗi khi thiết lập bộ đếm thời gian:", error);
        }
    };

    setupBookingTimer();

    // Dọn dẹp khi component unmount
    return () => {
        if (timerRef.current !== null) {
            clearInterval(timerRef.current);
        }
    };
}, [id, navigation]);